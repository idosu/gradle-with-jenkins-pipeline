#!/usr/bin/env groovy

apply plugin: 'jacoco'

// This code was copied from https://github.com/springfox/springfox/blob/fb780ee1f14627b239fba95730a69900b9b2313a/gradle/coverage.gradle
// For now there is no way to fail with jacoco plugin, there is a jira opened https://issues.gradle.org/browse/GRADLE-2783
task jacocoCoverage(type: JacocoReport) {
	description 'Runs jacoco report and validates the code coverage percentage from the property ext.limits'
        group = 'verification'
}

check.dependsOn jacocoCoverage

jacocoCoverage {
	sourceDirectories = sourceSets.main.java
	classDirectories = sourceSets.main.output
	executionData = files(test.jacoco.destinationFile)

	reports.xml.enabled true
	doLast {
		def report = reports.xml.destination

		def parser = new XmlParser()
		parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
		parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)

		def results = parser.parse(report)
		
		def counters = results.counter

		def percentage = { type ->
			def curr = counters.find { it.'@type'.equals(type) }

			def covered = 0;
			def missed = 0
			if (curr != null) {
				covered = curr.'@covered' as Double
				missed = curr.'@missed' as Double
			}
			def all = covered + missed

			return all == 0 ? 100.0 : ((covered / (covered + missed)) * 100).round(2)
		}
		
		def metricNames = [
			'instruction',
			'branch',
			'line',
			'complexity',
			'method',
			'class'
		]

		def metrics = [ : ]
		metricNames.each {
			metrics << [ "${it}" : percentage(it.toUpperCase()) ]
		}

		logger.debug("metrics: " + metrics)

		def failures = []
		metrics.each {
			def limit = limits."${it.key}"
			if (it.value < limit) {
				failures << "${it.key} coverage rate is: ${it.value}%, minimum was ${limit}%"
			}
		}

		if (failures) {
			logger.error("Code coverage failed")
			failures.each {
				logger.error("	- ${it}")
			}
			throw new GradleException("Code coverage failed")
		}
	}
}
